<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Blog on Dr Iggy's Coding Adventures</title><link>https://igor84.github.io/blog/</link><description>Recent content in Blog on Dr Iggy's Coding Adventures</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sat, 14 May 2022 19:47:47 +0200</lastBuildDate><atom:link href="https://igor84.github.io/blog/index.xml" rel="self" type="application/rss+xml"/><item><title>Basics of Allocating and Using Memory</title><link>https://igor84.github.io/blog/basics-of-allocating-and-using-memory/</link><pubDate>Mon, 13 Jun 2022 14:05:23 +0200</pubDate><guid>https://igor84.github.io/blog/basics-of-allocating-and-using-memory/</guid><description>Many of the top used programming languages today use garbage collection and with them we are always taught how manual memory management is hard. I get the feeling that many new programmers don&amp;rsquo;t even try to understand it today.
I want to show here how manual memory management can be not only very easy but also very fun.
Lesson 1: Let Operating System Do It There is a big class of programs that work as command line utilities.</description></item><item><title>Optimal Logging API for C#</title><link>https://igor84.github.io/blog/optimal-logging-api-for-csharp/</link><pubDate>Thu, 19 May 2022 20:40:33 +0200</pubDate><guid>https://igor84.github.io/blog/optimal-logging-api-for-csharp/</guid><description>There are often situations where logging can affect performance. It is probably rare in the server world but it comes quite often when we try to log stuff in our Unity game. There its effect can be quite visible.
That is why, so far, we disabled all logger calls in our production builds by using a [Conditional(&amp;quot;USE_LOGGING&amp;quot;)] attribute on logger methods and not defining the USE_LOGGER symbol in the build. You can read about that attribute here.</description></item><item><title>Png Reader in Zig</title><link>https://igor84.github.io/blog/png-reader-in-zig/</link><pubDate>Wed, 18 May 2022 19:00:00 +0200</pubDate><guid>https://igor84.github.io/blog/png-reader-in-zig/</guid><description>&lt;p>Although there is already a solid &lt;a href="https://github.com/zigimg/zigimg/">zigimg&lt;/a> image loading library
it didn&amp;rsquo;t quite tick all the checkboxes for me. It doesn&amp;rsquo;t provide the flexibility that I am aiming
for and it is using far more allocations than is necessary. Also since I already wrote a png reader
in &lt;a href="https://dlang.org">DLang&lt;/a> it felt like a good project for learning zig to try to reimplement it
and try to improve on my original design.&lt;/p></description></item><item><title>How do I stay motivated</title><link>https://igor84.github.io/blog/how-do-i-stay-motivated/</link><pubDate>Mon, 16 May 2022 18:17:32 +0200</pubDate><guid>https://igor84.github.io/blog/how-do-i-stay-motivated/</guid><description>&lt;p>I am doing programming for 24 years now and I don&amp;rsquo;t see myself getting bored with it. There is
always one more thing to learn or to solve and I really want to know everything &lt;i class="far
fa-grin-stars">&lt;/i>.&lt;/p>
&lt;p>The goal I am most interested in is making my own game engine. But I don&amp;rsquo;t want to take the SDL
library, some image and 3D data loading library and just write rendering logic. I want to learn how
it all works.&lt;/p></description></item></channel></rss>
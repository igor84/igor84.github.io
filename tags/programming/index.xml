<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>programming on Dr Iggy's Coding Adventures</title><link>https://igor84.github.io/tags/programming/</link><description>Recent content in programming on Dr Iggy's Coding Adventures</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 19 Jun 2022 10:53:03 +0200</lastBuildDate><atom:link href="https://igor84.github.io/tags/programming/index.xml" rel="self" type="application/rss+xml"/><item><title>Redesigning Zig IO Api</title><link>https://igor84.github.io/blog/redesigning-zig-io-api/</link><pubDate>Sun, 19 Jun 2022 10:53:03 +0200</pubDate><guid>https://igor84.github.io/blog/redesigning-zig-io-api/</guid><description>Input-output being one of the most fundamental systems in any programming language was probably one of the first that was designed in Zig&amp;rsquo;s standard library. As Zig grew and gained additional features it had a few redesigns but it is still not without issues so here I want to analyze how it is currently implemented and if we can now do better.
Note There are additional language improvement proposals aiming to improve this exact area like this and this but here I will only present what can be done with Zig today.</description></item><item><title>Mixins in Zig</title><link>https://igor84.github.io/blog/mixins-in-zig/</link><pubDate>Wed, 15 Jun 2022 21:33:58 +0200</pubDate><guid>https://igor84.github.io/blog/mixins-in-zig/</guid><description>What are mixins? Mixins are a way to mix in some common functionality into multiple structs. For example if you have a File and TcpSocket and they have their own different implementations of read(buffer: []u8) method and you want to add convenience methods like readInt(), readStruct() and similar that just call the read() method and format the result, you would usually have to write those methods in one struct and then copy them to the other.</description></item><item><title>Basics of Allocating and Using Memory</title><link>https://igor84.github.io/blog/basics-of-allocating-and-using-memory/</link><pubDate>Mon, 13 Jun 2022 14:05:23 +0200</pubDate><guid>https://igor84.github.io/blog/basics-of-allocating-and-using-memory/</guid><description>Many of the top used programming languages today use garbage collection and with them we are always taught how manual memory management is hard. I get the feeling that many new programmers don&amp;rsquo;t even try to understand it today.
I want to show here how manual memory management can be not only very easy but also very fun.
Lesson 1: Let Operating System Do It There is a big class of programs that work as command line utilities.</description></item><item><title>Optimal Logging API for C#</title><link>https://igor84.github.io/blog/optimal-logging-api-for-csharp/</link><pubDate>Thu, 19 May 2022 20:40:33 +0200</pubDate><guid>https://igor84.github.io/blog/optimal-logging-api-for-csharp/</guid><description>There are often situations where logging can affect performance. It is probably rare in the server world but it comes quite often when we try to log stuff in our Unity game. There its effect can be quite visible.
That is why, so far, we disabled all logger calls in our production builds by using a [Conditional(&amp;quot;USE_LOGGING&amp;quot;)] attribute on logger methods and not defining the USE_LOGGER symbol in the build. You can read about that attribute here.</description></item><item><title>Png Reader in Zig</title><link>https://igor84.github.io/blog/png-reader-in-zig/</link><pubDate>Wed, 18 May 2022 19:00:00 +0200</pubDate><guid>https://igor84.github.io/blog/png-reader-in-zig/</guid><description>&lt;p>Although there is already a solid &lt;a href="https://github.com/zigimg/zigimg/">zigimg&lt;/a> image loading library
it didn&amp;rsquo;t quite tick all the checkboxes for me. It doesn&amp;rsquo;t provide the flexibility that I am aiming
for and it is using far more allocations than is necessary. Also since I already wrote a png reader
in &lt;a href="https://dlang.org">DLang&lt;/a> it felt like a good project for learning zig to try to reimplement it
and try to improve on my original design.&lt;/p></description></item></channel></rss>
<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>csharp on Dr Iggy's Coding Adventures</title><link>https://igor84.github.io/tags/csharp/</link><description>Recent content in csharp on Dr Iggy's Coding Adventures</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 19 May 2022 20:40:33 +0200</lastBuildDate><atom:link href="https://igor84.github.io/tags/csharp/index.xml" rel="self" type="application/rss+xml"/><item><title>Optimal Logging API for C#</title><link>https://igor84.github.io/blog/optimal-logging-api-for-csharp/</link><pubDate>Thu, 19 May 2022 20:40:33 +0200</pubDate><guid>https://igor84.github.io/blog/optimal-logging-api-for-csharp/</guid><description>There are often situations where logging can affect performance. It is probably rare in the server world but it comes quite often when we try to log stuff in our Unity game. There its effect can be quite visible.
That is why, so far, we disabled all logger calls in our production builds by using a [Conditional(&amp;quot;USE_LOGGING&amp;quot;)] attribute on logger methods and not defining the USE_LOGGER symbol in the build. You can read about that attribute here.</description></item></channel></rss>